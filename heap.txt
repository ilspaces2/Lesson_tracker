Параметры запуска приложения: -Xmx200m -Xms200m -XX:+UseSerialGC -Xlog:gc*
Используемые инструменты для профилирования:
1. jmap -histo позволил увидеть созданные классы. Наглядно было видно сколько создано копий класса Item
    (плюс внутренние классы которые содержит Item) и сколько они занимают места в куче.
    Также видно общее количество и общий размер классов.

2. С помощью jstat -gcutil удалось оценить загруженность всех областей кучи в разных режимах работы (в процентах)
    и  получить дополнительную информацию в виде общего количества запусков очистки, время очистки.

3. Параметр запуска -Xlog:gc* обеспечил всей информацией об этапах сборки (вывод сообщений в консоль).

4. jconsole дал визуальное представление о состоянии всей памяти. Что-то среднее между  предыдущими инструментами,
    показался менее информативным, но удобным в плане быстрой оценки памяти.

5. Также обратил внимание что в ide есть Profiler. Имеет визуальное отображение и возможность записи файла.

200 мегабайт кучи хаватило на работу с одним миллионом заявок , но это уже предел и области eden и old загруженны на 100%,
остается только область s0(но она всегда 0%) и s1 которая примерно раз в минуту очищается. Если выбрать пункт показать
все заявки или добавить еще заявок то сборщик начинает очень активно работать и потом приложение падает
с ошибкой OutOfMemoryError: Java heap space
